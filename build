#! /usr/bin/env bash

################################################################################
# Functions
################################################################################

panic()
{
	echo "ERROR: $*"
	exit 1
}

get_dir()
{
	local dir="$1"
	local key="$2"
	local result=
	case "$key" in
	build)
		result="$dir/tmp_build";;
	install)
		result="$dir/tmp_install";;
	*)
		return 1;;
	esac
	echo "$result" || return 1
}

################################################################################
# Command-Line Processing
################################################################################

usage()
{
	cat <<- EOF
	usage: $0 -s dir -d dir
	NAME
	====

	build - Perform various stages of the software build.

	SYNOPSIS
	========

	build [options]

	OPTIONS
	=======

	--help (alias -h)
	    Print help information and exit.

	--verbose (alias -v)
	    Increase the verbosity of output.

	--print-only (alias -n)
	    Show what commands would be run without actually running them.

	--defaults (alias -a)
	    Initialize all of the settings to defaults that are likely to be
	    reasonable for many users.
	    [Since some users may not want to use the settings selected by
	    this option (such as the author of this software :P), they require
	    explicit opt-in via this option.]

	--clean (alias -c)
	    Specify that all files generated by the build process should be
	    removed prior to other actions.
	    The --no-clean option has the opposite effect.

	--build (alias -b)
	    Configure and build the code using CMake.
	    The --no-build causes the configure/build steps to be skipped.

	--demo (alias -t)
	    Run the demo scripts.
	    The --no-demo option has the opposite effect.

	--cxx-compiler \$path
	    Set the pathname of the C++ compiler program to \$path.

	--c-compiler \$path
	    Set the pathname of the C compiler program to \$path.

	--verbose-makefile
	    Enable verbose makefiles with CMake.
	    The --no-verbose-makefile option has the opposite effect.

	--debug
	    Use a CMake build type of "Build".

	--release
	    Use a CMake build type of "Release".

	--asan (alias -A)
	    Enable the use of Address Sanitizer (ASan).
	    The --no-asan option has the opposite effect.

	--ubsan (alias -U)
	    Enable the use of Undefined Behavior Sanitizer (UBSan).
	    The --no-ubsan option has the opposite effect.

	--fmt (alias -f)
	    Enable the downloading and building of a slightly modified version
	    of the fmt library for std::format support.
	    The --no-fmt option has the opposite effect.

	--dev
	--extras
	--dir \$path (alias -s)
	    These options are for internal use only and only mentioned for
	    for completeness.

	EXAMPLES
	========
	EOF

	if [ $# -gt 0 ]; then
		echo
		echo "BAD USAGE: $*"
	fi

	exit 2
}

self_dir="$(dirname "$0")" || \
  panic "cannot get directory name of program"
self_dir="$(realpath "$self_dir")" || \
  panic "cannot get real path of program"

if [ -f "$self_dir/README.md" ]; then
	slides_software_dir="$self_dir/slides/examples"
	software_dir="$self_dir/miscellany/examples"
else
	slides_software_dir="$self_dir/../slides/software"
	software_dir="$self_dir/../software"
fi
default_software_dirs=(
	"$slides_software_dir"
	"$software_dir"
)

build_type=Debug
c_compiler="$CC"
cxx_compiler="$CXX"
use_fmtlib=0
do_clean=0
do_build=0
do_demo=0
enable_extras=
verbose=0
verbose_makefile=0
enable_asan=
enable_ubsan=
print_only=0
software_dirs=()

while [ $# -gt 0 ]; do
	option="$1"
	case "$option" in
	--help|-h)
		usage;;
	--verbose|-v)
		shift 1
		verbose=$((verbose + 1))
		;;
	-n)
		shift 1
		print_only=1
		;;
	--defaults|-a)
		shift 1
		do_clean=1
		do_build=1
		do_demo=0
		enable_asan=1
		enable_ubsan=1
		build_type=Debug
		verbose=0
		enable_extras=0
		verbose_makefile=0
		use_fmtlib=1
		;;
	--dev)
		shift 1
		do_clean=1
		do_build=1
		do_demo=1
		enable_asan=1
		enable_ubsan=1
		build_type=Debug
		verbose=1
		enable_extras=1
		verbose_makefile=1
		use_fmtlib=1
		;;
	--no-clean)
		shift 1
		do_clean=0
		;;
	--clean|-c)
		shift 1
		do_clean=1
		;;
	--no-build)
		shift 1
		do_build=0
		;;
	--build|-b)
		shift 1
		do_build=1
		;;
	--no-demo)
		shift 1
		do_demo=0
		;;
	--demo|-t)
		shift 1
		do_demo=1
		;;
	--cxx-compiler)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		cxx_compiler="$1"
		shift 1
		;;
	--c-compiler)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		c_compiler="$1"
		shift 1
		;;
	--no-verbose-makefile)
		shift 1
		verbose_makefile=0
		;;
	--verbose-makefile)
		shift 1
		verbose_makefile=1
		;;
	--debug)
		shift 1
		build_type=Debug
		;;
	--release)
		shift 1
		build_type=Release
		;;
	--no-asan)
		shift 1
		enable_asan=0
		;;
	--asan|-A)
		shift 1
		enable_asan=1
		;;
	--no-ubsan)
		shift 1
		enable_ubsan=0
		;;
	--ubsan|-U)
		shift 1
		enable_ubsan=1
		;;
	--no-fmt)
		shift 1
		use_fmtlib=0
		;;
	--fmt|-f)
		shift 1
		use_fmtlib=1
		;;
	--no-extras)
		shift 1
		enable_extras=0
		;;
	--extras)
		shift 1
		enable_extras=1
		;;
	--dir|-s)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		software_dirs+=("$1")
		shift 1
		;;
	--*|-*)
		usage "invalid option $option"
		;;
	*)
		break
		;;
	esac
done
shift $((OPTIND - 1))

if [ "${#software_dirs[@]}" -eq 0 ]; then
	software_dirs=("${default_software_dirs[@]}")
fi

if [ "${#software_dirs[@]}" -eq 0 ]; then
	usage "slides software directory not specified"
fi

################################################################################
# Clean
################################################################################

for work_dir in "${software_dirs[@]}"; do

	source_dir="$work_dir"
	build_dir="$(get_dir "$source_dir" build)" || \
	  panic "cannot get directory name"
	install_dir="$(get_dir "$source_dir" install)" || \
	  panic "cannot get directory name"

	if [ "$do_clean" -ne 0 ]; then
		command=(rm -rf "$build_dir" "$install_dir")
		echo "RUNNING: ${command[*]}"
		if [ "$print_only" -eq 0 ]; then
			"${command[@]}" || \
			  panic "cannot remove build directory"
		fi
	fi

done

################################################################################
# Configure and Build
################################################################################

for work_dir in "${software_dirs[@]}"; do

	source_dir="$work_dir"
	build_dir="$(get_dir "$source_dir" build)" || \
	  panic "cannot get directory name"
	install_dir="$(get_dir "$source_dir" install)" || \
	  panic "cannot get directory name"

	if [ "$do_build" -ne 0 ]; then

		cmake_env=()
		cmake_configure_options=()

		cmake_configure_options+=(-DCMAKE_INSTALL_PREFIX="$install_dir")

		# ENABLE_EXPERIMENTAL?

		if [ -n "$cxx_compiler" ]; then
			cmake_env+=(CXX="$cxx_compiler")
		fi
		if [ -n "$c_compiler" ]; then
			cmake_env+=(CC="$c_compiler")
		fi
		if [ -n "$enable_extras" ]; then
			cmake_configure_options+=(-DENABLE_EXTRAS="$enable_extras")
		fi
		if [ -n "$build_type" ]; then
			cmake_configure_options+=(-DCMAKE_BUILD_TYPE=Debug)
		fi
		if [ -n "$verbose_makefile" ]; then
			cmake_configure_options+=(-DCMAKE_VERBOSE_MAKEFILE="$verbose_makefile")
		fi
		if [ -n "$enable_asan" ]; then
			cmake_configure_options+=(-DENABLE_ASAN="$enable_asan")
		fi
		if [ -n "$enable_ubsan" ]; then
			cmake_configure_options+=(-DENABLE_UBSAN="$enable_ubsan")
		fi
		if [ -n "$use_fmtlib" ]; then
			cmake_configure_options+=(-DUSE_FMTLIB="$use_fmtlib")
		fi

		command=(env "${cmake_env[@]}"
		  cmake -H"$source_dir" -B"$build_dir" "${cmake_configure_options[@]}")
		echo "RUNNING: ${command[*]}"
		if [ "$print_only" -eq 0 ]; then
			"${command[@]}" || \
			  panic "cmake configure failed"
		fi

		command=(env "${cmake_env[@]}" cmake --build "$build_dir")
		echo "RUNNING: ${command[*]}"
		if [ "$print_only" -eq 0 ]; then
			"${command[@]}" || \
			  panic "cmake build failed"
		fi

	fi

done

################################################################################
# Run Demos
################################################################################

for work_dir in "${software_dirs[@]}"; do

	source_dir="$work_dir"
	build_dir="$(get_dir "$source_dir" build)" || \
	  panic "cannot get directory name"
	install_dir="$(get_dir "$source_dir" install)" || \
	  panic "cannot get directory name"

	if [ "$do_demo" -ne 0 ]; then
		command=(env "${cmake_env[@]}"
		  cmake --build "$build_dir" --target demo)
		echo "RUNNING: ${command[*]}"
		if [ "$print_only" -eq 0 ]; then
			"${command[@]}" || \
			  panic "cmake demo failed"
		fi
	fi

done
