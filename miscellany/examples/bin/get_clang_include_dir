#! /usr/bin/env bash

################################################################################
# Functions
################################################################################

eecho()
{
	echo "$@" 1>&2
}

panic()
{
	eecho "ERROR: $*"
	exit 1
}

get_clang_version()
{
	local program="${1:-clang++}"
	"$program" --version | awk '
		(NR==1){
			for (i = 1; i <= NF; ++i) {
				if (tolower($i) == "version") {
					++i;
					print $i;
					break;
				}
			}
		}
	'
}

usage()
{
	echo "BAD USAGE: $*"
	exit 2
}

################################################################################
# Command-Line Processing
################################################################################

self_dir="$(dirname "$0")" || panic "dirname failed"

verbose=0

while getopts v option; do
	case "$option" in
	v)
		verbose=$((verbose + 1));;
	\?)
		usage "invalid option $option";;
	esac
done
shift $((OPTIND - 1))

################################################################################
# Determine Clang Include Directory
################################################################################

clang_include_dir=

if [ -z "$clang_include_dir" -a -n "$CL_CLANG_INCLUDE_DIR" ]; then
	clang_include_dir="$CL_CLANG_INCLUDE_DIR"
fi

if [ -z "$clang_include_dir" ]; then

	sde_top_dir="$SDE_TOP_DIR"
	if [ -n "$sde_top_dir" ]; then
		sde_top_dir="$(realpath "$sde_top_dir")" || \
		  panic "realpath failed"
	fi

	IFS=":" read -a path <<< "$PATH" || panic "cannot get search path"
	clangxx=
	for dir in "${path[@]}"; do
		if [ "$verbose" -ge 2 ]; then
			eecho "$dir"
		fi
		case "$dir" in
		*ccache*)
			if [ "$verbose" -ge 1 ]; then
				eecho "SKIPPING: $dir"
			fi
			continue
			;;
		esac
		if [ -n "$sde_top_dir" ]; then
			path="$(realpath "$dir")" || panic "realpath failed"
			if [ "$path" == "$sde_top_dir/bin" ]; then
				if [ "$verbose" -ge 1 ]; then
					eecho "SKIPPING: $dir"
				fi
				continue
			fi
		fi
		target="$dir/clang++"
		if [ -x "$target" ]; then
			clangxx="$target"
			break
		fi
	done
	if [ -z "$clangxx" ]; then
		panic "clang++ program not on search path"
	fi
	if [ "$verbose" -ge 1 ]; then
		eecho "clang program $clangxx"
	fi

	clang_version="$(get_clang_version "$clangxx")" || \
	  panic "cannot get clang version"
	clang_major_version="${clang_version%%.*}"
	if [ "$verbose" -ge 1 ]; then
		eecho "clang version $clang_version"
		eecho "clang major version $clang_major_version"
	fi

	clang_dir="$(dirname "$clangxx")" || panic "dirname failed"

	# Note: The order of the following list of directories is important.
	# Look for the directory names based on $clang_version before
	# the ones based on $clang_major_version.
	dir_list=(
		"$clang_dir/../lib/clang/$clang_version/include"
		"$clang_dir/../lib64/clang/$clang_version/include"
		"$clang_dir/../lib/clang/$clang_major_version/include"
		"$clang_dir/../lib64/clang/$clang_major_version/include"
		# The following are for Ubuntu but may not be needed:
		"/usr/include/clang/$clang_version/include"
		"/usr/include/clang/$clang_major_version/include"
		# The following are for MacOS and Brew:
		"/usr/local/opt/llvm@15/lib/clang/$clang_version/include"
		"/usr/local/opt/llvm@15/lib/clang/$clang_major_version/include"
	)
	for dir in "${dir_list[@]}"; do
		if [ "$verbose" -ge 1 ]; then
			eecho "Checking for existence of directory $dir"
		fi
		if [ -d "$dir" ]; then
			clang_include_dir="$dir"
			break
		fi
		clang_include_dir=
	done

fi

if [ "$verbose" -ge 1 ]; then
	eecho "expected clang include directory $clang_include_dir"
fi

if [ ! -d "$clang_include_dir" ]; then
	panic "clang include directory not found ($clang_include_dir)"
fi

echo "$clang_include_dir"
