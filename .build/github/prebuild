#! /usr/bin/env bash

################################################################################

panic()
{
	echo "ERROR: $*"
	exit 1
}

list_directory_recursive()
{
    find "$1" -printf "%M %u %P\n" | sort
}

list_directory()
{
	local options=()
	while [ $# -gt 1 ]; do
		options+=("$1")
		shift 1
	done
	echo "directory: $1" || return 1
    ls -l "${options[@]}" "$1" || return 1
}

print_settings()
{
	local gcc_path="$(type -P gcc)"
	local gxx_path="$(type -P g++)"
	local clang_path="$(type -P clang)"
	local clangxx_path="$(type -P clang++)"
	cat <<- EOF
	PATH: $PATH
	CC: $CC
	CXX: $CXX

	CPLUS_INCLUDE_PATH: $CPLUS_INCLUDE_PATH
	C_INCLUDE_PATH: $C_INCLUDE_PATH
	CPATH: $CPATH

	gcc path: $gcc_path
	$(ls -al $gcc_path)
	gcc version:
	----------
	$($gcc_path --version)
	----------

	g++ path: $gxx_path
	$(ls -al $gxx_path)
	----------
	g++ version: $($gxx_path --version)
	----------

	clang++ path: $clangxx_path
	$(ls -al $clangxx_path)
	----------
	clang++ version: $($clangxx_path --version)
	----------

	clang path: $clang_path
	$(ls -al $clang_path)
	----------
	clang version: $($clang_path --version)
	----------

	python path: $(type -P python)
	python2 path: $(type -P python2)
	python3 path: $(type -P python3)

	SDK path: $(xcrun --show-sdk-path)
	EOF
}

realpath()
{
	python -c 'import os, sys; print(os.path.realpath(sys.argv[1]))' "$1"
}

################################################################################

usage()
{
	echo "BAD USAGE: $*"
	exit 2
}

setup_file=
verbose=0
matrix_os=

while getopts vs:c: option; do
	case "$option" in
	c)
		setup_file="$OPTARG";;
	v)
		verbose=$((verbose + 1));;
	s)
		matrix_os="$OPTARG";;
	*)
		usage "invalid option $option"
		break
		;;
	esac
done
shift $((OPTIND - 1))

if [ "$verbose" -ge 2 ]; then
	set -xv
fi

self_dir="$(dirname "$0")" || panic "dirname failed"
self_dir="$(realpath "$self_dir")" || panic "realpath failed"
tmp_dir=/tmp

if [ -z "$matrix_os" ]; then
	panic "GitHub Actions matrix OS not specified"
fi

clang_version=15.0.7
clang_major_version=15
gcc_major_version=12

setup_lines=()

echo "PREBUILD MATRIX OS: $matrix_os"

print_settings

case "$matrix_os" in

ubuntu-*)

	delete_packages=()

	llvm_packages=(
		libllvm-15-ocaml-dev
		libllvm15
		llvm-15
		llvm-15-dev
		llvm-15-doc
		llvm-15-examples
		llvm-15-runtime
		clang-15
		clang-tools-15
		clang-15-doc
		libclang-common-15-dev
		libclang-15-dev
		libclang1-15
		clang-format-15
		python3-clang-15
		clangd-15
		clang-tidy-15
		libfuzzer-15-dev
		lldb-15
		lld-15
		libc++-15-dev
		libc++abi-15-dev
		libomp-15-dev
		libclc-15-dev
		libunwind-15-dev
		libmlir-15-dev
		mlir-15-tools
		libbolt-15-dev
		bolt-15
	)

	case "$matrix_os" in

	*-22.04)
		repos=(
			"deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main"
		)
		other_packages=(
			gcc-11
			libboost-all-dev
			python3
		)
		delete_packages+=(
			libc++1-14
			libc++1-15
			libc++abi1-14
			libc++abi1-15
			libunwind-14
			libunwind-15
			python3-lldb-14
			python3-lldb-15
		)
		;;

	*-20.04)
		repos=(
			"deb http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main"
		)
		other_packages=(
			gcc-10
			libboost-all-dev
			python3
		)
		;;

	*)
		panic "invalid matrix OS value $matrix_os"
		;;

	esac

	if [ "${#delete_packages[@]}" -ne 0 ]; then
		sudo apt-get --purge autoremove "${delete_packages[@]}" || \
		  panic "cannot remove packages"
	fi

	wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | \
	  sudo apt-key add -

	for repo in "${repos[@]}"; do
		echo "Adding APT repository: $repo"
		sudo add-apt-repository "$repo" || \
		  panic "add-apt-repository failed for $repo"
	done

	echo "Updating packages"
	sudo apt-get update || \
	  panic "apt-get update failed"

	echo "Installing packages: ${other_packages[*]}"
	sudo apt-get install "${other_packages[@]}" "${llvm_packages[@]}" || \
	  panic "apt-get install failed"

	case "$matrix_os" in
	*-22.04)
		if [ "$verbose" -ge 1 ]; then
			list_directory    /usr/lib64
			list_directory    /usr/lib
			list_directory    /usr/lib/cmake/clang-15
			list_directory -L /usr/lib/cmake/clang-15
			list_directory    /lib/cmake/clang-15
			list_directory -L /lib/cmake/clang-15
			list_directory    /usr/include/llvm-15/llvm
			list_directory    /usr/lib/llvm-15/lib
			list_directory    /usr/lib/llvm-15/lib/clang
			list_directory    /usr/lib/llvm-15/lib/clang/15
			list_directory    /usr/lib/llvm-15/lib/clang/15.0.6
			list_directory    /usr/lib/llvm-15/lib/cmake/llvm # CMake config
			list_directory    /usr/lib/llvm-15/lib/cmake/clang
		fi
	esac

	setup_lines+=("export PATH='/usr/lib/llvm-$clang_major_version/bin:$PATH'")
	setup_lines+=("export CMAKE_PREFIX_PATH='/usr/lib/llvm-$clang_major_version/lib/cmake/llvm:$CMAKE_PREFIX_PATH'")
	setup_lines+=("export LD_LIBRARY_PATH='/usr/lib/llvm-$clang_major_version/lib:$LD_LIBRARY_PATH'")
	case "$CC" in
	*clang*)
		setup_lines+=("export CC=clang")
		setup_lines+=("export CXX=clang++")
		;;
	*gcc*)
		case "$matrix_os" in
		*-20.04)
			setup_lines+=("export CC=gcc-10")
			setup_lines+=("export CXX=g++-10")
			;;
		esac
		;;
	esac

	;;

macos-*)

	#bin_dir="$self_dir/bin"
	bin_dir="$tmp_dir/bin"
	llvm_dir=/usr/local/opt/llvm@$clang_major_version
	gcc_dir=/usr/local/opt/gcc@$gcc_major_version
	gxx_program="$gcc_dir/bin/g++-$gcc_major_version"
	gcc_program="$gcc_dir/bin/gcc-$gcc_major_version"
	python_program=/usr/local/bin/python3
	make_program=/usr/local/bin/make
	cmake_program=/usr/local/bin/cmake

	sdk_path="$(xcrun --show-sdk-path)" || panic

	mkdir -p "$bin_dir" || \
	  panic "cannot make directory $bin_dir"

	#export HOMEBREW_NO_AUTO_UPDATE=1
	#export HOMEBREW_NO_ANALYTICS=1
	export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
	export HOMEBREW_NO_INSTALL_CLEANUP=1
	brew update || panic "brew update failed"
	brew install coreutils || panic "brew install coreutils failed"
	if [ 1 -ne 0 ]; then
		find /usr/local/bin -lname '*/Library/Frameworks/Python.framework/*' \
		  -delete
		sudo rm -rf /Library/Frameworks/Python.framework/
		brew install --force python3 && \
		  brew unlink python3 && \
		  brew unlink python3 && \
		  brew link --overwrite python3 || panic
	fi
	brew install boost || panic "brew install boost failed"
	brew install gcc || panic "brew install gcc failed"
	brew install llvm@15 || panic "brew install llvm failed"
	brew install cmake || panic "brew install cmake failed"
	brew install make || panic "brew install make failed"
	#brew install lit || panic "brew install failed"

	list_directory -L /usr/local/Cellar/llvm/15/bin/clang
	list_directory -L /usr/local/Cellar
	list_directory  -L /usr/local/opt
	#list_directory -L /usr/local/opt/llvm
	#list_directory -L /usr/local/opt/clang

	list_directory -L /usr/local/opt/llvm@15/bin
	list_directory -L /usr/local/opt/llvm@15/include
	list_directory -L /usr/local/opt/llvm@15/include/clang
	#list_directory -L /usr/local/opt/llvm@15/include/clang/15.0.6
	#list_directory -L /usr/local/opt/llvm@15/lib
	#list_directory -L /usr/local/opt/llvm@15/lib/clang
	list_directory -L /usr/local/opt/llvm@15/lib/clang/15.0.6/include

	list_directory -L /usr/local/opt/gcc@13
	list_directory -L /usr/local/opt/gcc@13/bin
	list_directory -L /usr/local/opt/gcc@12
	list_directory -L /usr/local/opt/gcc@12/bin

	cat <<- EOF
	python: $(type -P python)
	python2: $(type -P python2)
	python3: $(type -P python3)
	EOF

	list_directory -L /usr/local/opt/python
	list_directory -L /usr/local/opt/python/bin
	list_directory -L /usr/local/opt/python3
	list_directory -L /usr/local/opt/python3/bin
	list_directory -L /usr/local/opt/cmake
	list_directory -L /usr/local/opt/cmake/bin
	list_directory -L /usr/local/opt/make
	list_directory -L /usr/local/opt/make/bin

	ln -s "$gcc_program" "$bin_dir/gcc" || \
	  panic "cannot create symbolic link for gcc"
	ln -s "$gxx_program" "$bin_dir/g++" || \
	  panic "cannot create symbolic link for g++"
	ln -s "$python_program" "$bin_dir/python" || \
	  panic "cannot create symbolic link for python"
	ln -s "$cmake_program" "$bin_dir/cmake" || \
	  panic "cannot create symbolic link for cmake"
	ln -s "$make_program" "$bin_dir/make" || \
	  panic "cannot create symbolic link for make"
	list_directory -L "$bin_dir"

	setup_lines+=("export PATH=$bin_dir:$gcc_dir/bin:$llvm_dir/bin:$PATH")
	setup_lines+=("export CMAKE_PREFIX_PATH='$llvm_dir/lib/cmake/llvm:$CMAKE_PREFIX_PATH'")
	setup_lines+=("export LD_LIBRARY_PATH='$llvm_dir/lib:$LD_LIBRARY_PATH'")
	#export CL_CLANG_INCLUDE_DIR="/usr/local/opt/llvm@$clang_major_version/lib/clang/$clang_version/include"
	setup_lines+=("export CL_CLANG_INCLUDE_DIR='$llvm_dir/lib/clang/$clang_version/include'")
	setup_lines+=("export CPLUS_INCLUDE_PATH='$llvm_dir/include/c++/v1:$llvm_dir/lib/clang/$clang_version/include:$sdk_path:$sdk_path/usr/include'")

	;;

*)
	panic "invalid OS $matrix_os"
	;;

esac

if [ -n "$setup_file" ]; then
	echo -n > "$setup_file" || panic "cannot truncate setup file $setup_file"
	for line in "${setup_lines[@]}"; do
		cat >> "$setup_file" <<< "$line" || \
		  panic "cannot write setup file $setup_file"
	done
	ls -al "$setup_file"
	cat <<- EOF
	setup file contents:
	============================================================
	$(cat "$setup_file")
	============================================================
	EOF
fi

print_settings

exit 0
